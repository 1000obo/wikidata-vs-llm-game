<?PHP

error_reporting(E_ERROR|E_CORE_ERROR|E_ALL|E_COMPILE_ERROR);
ini_set('display_errors', 1);

header('Content-type: application/json');

$callback = $_REQUEST['callback'] ;
$out = array () ;

$str_rand=rand();
$id_p = md5($str_rand);

if ( $_REQUEST['action'] == 'desc' ) {

	$out = array (
		"label" => array ( "en" => "Famous People: LLM vs. Wikidata" ) ,
		"description" => array ( "en" => "This game will show a collection of questions about famous people. The questions may take a few seconds to load. You will be asked to select the most accurate answer between the response extracted from Wikidata and the response generated by a Large Language Model (GPT-3.5-Turbo), given your current knowledge on these topics. The responses' sources, Wikidata or LLM, are not identified. Please, take your time and skip any question if you are unsure of its answer." ) ,
		"icon" => 'https://upload.wikimedia.org/wikipedia/commons/thumb/8/88/Inkscape_vectorisation_test.svg/120px-Inkscape_vectorisation_test.svg.png',
		"idParticipant" => $id_p
	) ;

} else if ( $_REQUEST['action'] == 'tiles' ) {


	// GET parameters
	$num = 31; //$_REQUEST['num'] ; // Number of games to return
	$lang = $_REQUEST['lang'] ; // The language to use, with 'en' as fallback; ignored in this game
	$random_number_array = range(1, $num);
	shuffle($random_number_array);

	$out['tiles'] = array();
	$n = 0;
	while ( count($out['tiles']) < $num ) {
		$g = array(
			'id' => rand(),
			'sections' => array () ,
			'controls' => array ()
		) ;
		// GET Tiles from Python
		$instruction = "/usr/bin/python3 StudyApp/get_tile.py -c " . strval($random_number_array[$n]) . " -t popCulture";
		$python_output = exec($instruction);

		if ($random_number_array[$n] == $num) {
			$g['sections'][0] = array('type' => 'text', 'title' => "Please, select number 4.");
			for ($i = 0; $i < 7; $i++) {
				$accept_array[$i] = array ( 'type' => 'white' , 'decision' => "yes" , 'label' => $i + 1);
			}
			$g['controls'][] = array (
				'type' => 'buttons' ,
				'entries' => $accept_array
			);
		}
		else {

			$output_array = explode("@", $python_output);

			$len_output = count($output_array);
			
			$g['sections'][1] = array('type' => 'item' , 'q' => strval($output_array[0]));
			$g['sections'][0] = array('type' => 'text', 'title' => $output_array[1]);

			$accept_array = array(); // TODO: Connection with API to edit (ids)
			$random_number_options = range(2, 3);
			shuffle($random_number_options);
			if ($random_number_options[0] == 2) {
				$decision_options = ["llm", "wikidata"];
			}
			else {
				$decision_options = ["wikidata", "llm"];
			}

			$accept_array[0] = array ( 'type' => 'white' , 'decision' => $decision_options[0] , 'label' => 'Answer 1:' . $output_array[$random_number_options[0]]);
			$accept_array[1] = array ( 'type' => 'white' , 'decision' => $decision_options[1] , 'label' => 'Answer 2:' . $output_array[$random_number_options[1]]);

			
			$g['controls'][] = array ( 
				'type' => 'buttons' ,
				'entries' => array_merge (
					$accept_array ,
					array(
						array ( 'type' => 'green' , 'decision' => 'yes' , 'label' => 'Answers 1 and 2 are both correct' ),
						array ( 'type' => 'yellow' , 'decision' => 'no' , 'label' => 'Answers 1 and 2 are both incorrect' ),
						array ( 'type' => 'blue' , 'decision' => 'skip' , 'label' => 'Skip/I don\'t know' )
					)
				)
			) ;
		}
		$out['tiles'][$n] = $g;
		$n = $n + 1;

		if ( count($out['tiles']) == $num ) { 
			break ;
		}

	}
} else if ( $_REQUEST['action'] == 'log_action' ) {

	$out['status'] = 'Whatevaz, man' ;

} else {
	$out['error'] = "No valid action!" ;
}

print $callback . '(' ;
print json_encode ( $out ) ;
print ")\n" ;

?>
